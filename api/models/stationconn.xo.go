package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// StationConn represents a row from 'public.station_conn'.
type StationConn struct {
	LineName            string `json:"line_name"`             // line_name
	LineNameH           string `json:"line_name_h"`           // line_name_h
	LineCd              int    `json:"line_cd"`               // line_cd
	StationCd           int    `json:"station_cd"`            // station_cd
	StationGCd          int    `json:"station_g_cd"`          // station_g_cd
	Address             string `json:"address"`               // address
	StationName         string `json:"station_name"`          // station_name
	BeforeLineName      string `json:"before_line_name"`      // before_line_name
	BeforeStationCd     int    `json:"before_station_cd"`     // before_station_cd
	BeforeStationName   string `json:"before_station_name"`   // before_station_name
	BeforeAddress       string `json:"before_address"`        // before_address
	AfterLineName       string `json:"after_line_name"`       // after_line_name
	AfterStationCd      int    `json:"after_station_cd"`      // after_station_cd
	AfterStationName    string `json:"after_station_name"`    // after_station_name
	AfterAddress        string `json:"after_address"`         // after_address
	TransferLineName    string `json:"transfer_line_name"`    // transfer_line_name
	TransferStationCd   int    `json:"transfer_station_cd"`   // transfer_station_cd
	TransferStationName string `json:"transfer_station_name"` // transfer_station_name
	TransferAddress     string `json:"transfer_address"`      // transfer_address
}

// StationConnsByStationCD runs a custom query, returning results as StationConn.
func StationConnsByStationCD(ctx context.Context, db DB, stationCD int) ([]*StationConn, error) {
	// query
	const sqlstr = `select li.line_name, li.line_name_h, li.line_cd, st.station_cd, st.station_g_cd, st.address, st.station_name, COALESCE(s2l.line_name, '') as before_line_name, COALESCE(st2.station_cd, 0) as before_station_cd, COALESCE(st2.station_name, '') as before_station_name, COALESCE(st2.address, '') as before_address, COALESCE(s3l.line_name, '') as after_line_name, COALESCE(st3.station_cd, 0) as after_station_cd, COALESCE(st3.station_name, '') as after_station_name, COALESCE(st2.address, '') as after_address, COALESCE(gli.line_name, '') as transfer_line_name, COALESCE(gs.station_cd, 0) as transfer_station_cd, COALESCE(gs.station_name, '') as transfer_station_name, COALESCE(gs.address, '') as transfer_address from station st inner join line li on st.line_cd = li.line_cd left outer join junction sjb on st.line_cd = sjb.line_cd and st.station_cd = sjb.station_cd2 left outer join junction sja on st.line_cd = sja.line_cd and st.station_cd = sja.station_cd1 left outer join station st2 on sjb.line_cd = st2.line_cd and sjb.station_cd1 = st2.station_cd left outer join line s2l on st2.line_cd = s2l.line_cd left outer join station st3 on sja.line_cd = st3.line_cd and sja.station_cd2 = st3.station_cd left outer join line s3l on st3.line_cd = s3l.line_cd left outer join station gs on st.station_g_cd = gs.station_g_cd and st.station_cd <> gs.station_cd left outer join line gli on gs.line_cd = gli.line_cd where st.station_cd = $1 and st.e_status = 0 order by st.e_sort`
	// run
	logf(sqlstr, stationCD)
	rows, err := db.QueryContext(ctx, sqlstr, stationCD)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*StationConn
	for rows.Next() {
		var sc StationConn
		// scan
		if err := rows.Scan(&sc.LineName, &sc.LineNameH, &sc.LineCd, &sc.StationCd, &sc.StationGCd, &sc.Address, &sc.StationName, &sc.BeforeLineName, &sc.BeforeStationCd, &sc.BeforeStationName, &sc.BeforeAddress, &sc.AfterLineName, &sc.AfterStationCd, &sc.AfterStationName, &sc.AfterAddress, &sc.TransferLineName, &sc.TransferStationCd, &sc.TransferStationName, &sc.TransferAddress); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &sc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
