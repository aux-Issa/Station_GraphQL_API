// Package models contains generated code for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// BeforeStation represents a row from 'public.before_station'.
type BeforeStation struct {
	StationCd             int    `json:"station_cd"`               // station_cd
	StationName           string `json:"station_name"`             // station_name
	StationGCd            int    `json:"station_g_cd"`             // station_g_cd
	Address               string `json:"address"`                  // address
	LineCd                int    `json:"line_cd"`                  // line_cd
	LineName              string `json:"line_name"`                // line_name
	BeforeStationLineCd   int    `json:"before_station_line_cd"`   // before_station_line_cd
	BeforeStationLineName string `json:"before_station_line_name"` // before_station_line_name
	BeforeStationCd       int    `json:"before_station_cd"`        // before_station_cd
	BeforeStationName     string `json:"before_station_name"`      // before_station_name
	BeforeStationAddress  string `json:"before_station_address"`   // before_station_address
}

// BeforeStationsByStationCD runs a custom query, returning results as BeforeStation.
func BeforeStationsByStationCD(ctx context.Context, db DB, stationCD int) ([]*BeforeStation, error) {
	// query
	const sqlstr = `select s.station_cd, ` +
		`s.station_name, ` +
		`s.station_g_cd, ` +
		`s.address, ` +
		`ls.line_cd, ` +
		`ls.line_name, ` +
		`COALESCE(lt.line_cd, 0)     as before_station_line_cd, ` +
		`COALESCE(lt.line_name, '')   as before_station_line_name, ` +
		`COALESCE(t.station_cd, 0)   as before_station_cd, ` +
		`COALESCE(t.station_name, '') as before_station_name, ` +
		`COALESCE(t.address, '')      as before_station_address ` +
		`from station s ` +
		`left outer join station t on s.station_g_cd = t.station_g_cd and s.station_cd <> t.station_cd ` +
		`left outer join line ls on s.line_cd = ls.line_cd ` +
		`left outer join line lt on t.line_cd = lt.line_cd ` +
		`where s.station_cd = $1`
	// run
	logf(sqlstr, stationCD)
	rows, err := db.QueryContext(ctx, sqlstr, stationCD)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*BeforeStation
	for rows.Next() {
		var bs BeforeStation
		// scan
		if err := rows.Scan(&bs.StationCd, &bs.StationName, &bs.StationGCd, &bs.Address, &bs.LineCd, &bs.LineName, &bs.BeforeStationLineCd, &bs.BeforeStationLineName, &bs.BeforeStationCd, &bs.BeforeStationName, &bs.BeforeStationAddress); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &bs)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
