package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Transfer represents a row from 'public.transfer'.
type Transfer struct {
	StationCd           int    `json:"station_cd"`            // station_cd
	StationName         string `json:"station_name"`          // station_name
	StationGCd          int    `json:"station_g_cd"`          // station_g_cd
	Address             string `json:"address"`               // address
	LineCd              int    `json:"line_cd"`               // line_cd
	LineName            string `json:"line_name"`             // line_name
	TransferLineCd      int    `json:"transfer_line_cd"`      // transfer_line_cd
	TransferLineName    string `json:"transfer_line_name"`    // transfer_line_name
	TransferStationCd   int    `json:"transfer_station_cd"`   // transfer_station_cd
	TransferStationName string `json:"transfer_station_name"` // transfer_station_name
	TransferAddress     string `json:"transfer_address"`      // transfer_address
}

// TransfersByStationCD runs a custom query, returning results as Transfer.
func TransfersByStationCD(ctx context.Context, db DB, stationCD int) ([]*Transfer, error) {
	// query
	const sqlstr = `select s.station_cd, ` +
		`s.station_name, ` +
		`s.station_g_cd, ` +
		`s.address, ` +
		`ls.line_cd, ` +
		`ls.line_name, ` +
		`COALESCE(lt.line_cd, 0)     as transfer_line_cd, ` +
		`COALESCE(lt.line_name, '')   as transfer_line_name, ` +
		`COALESCE(t.station_cd, 0)   as transfer_station_cd, ` +
		`COALESCE(t.station_name, '') as transfer_station_name, ` +
		`COALESCE(t.address, '')      as transfer_address ` +
		`from station s ` +
		`left outer join station t on s.station_g_cd = t.station_g_cd and s.station_cd <> t.station_cd ` +
		`left outer join line ls on s.line_cd = ls.line_cd ` +
		`left outer join line lt on t.line_cd = lt.line_cd ` +
		`where s.station_cd = $1`
	// run
	logf(sqlstr, stationCD)
	rows, err := db.QueryContext(ctx, sqlstr, stationCD)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*Transfer
	for rows.Next() {
		var t Transfer
		// scan
		if err := rows.Scan(&t.StationCd, &t.StationName, &t.StationGCd, &t.Address, &t.LineCd, &t.LineName, &t.TransferLineCd, &t.TransferLineName, &t.TransferStationCd, &t.TransferStationName, &t.TransferAddress); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &t)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
